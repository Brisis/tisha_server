generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  id String @id @default(uuid())
  name String @unique
  city String

  createdAt       DateTime @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime @updatedAt @db.Timestamptz(3)
   
  users User[]
  inputs Input[]

  @@map("locations")
}

model User {
  id String @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  name String
  surname String?
  dob String?
  age Int?
  gender Gender?
  phone String?
  address String?
  nationalId String?

  farmSize Float?
  coordinates String?
  landOwnership OwnerShip?
  farmerType FarmerType?
  cropType CropType?
  livestockType LiveStockType?
  livestockNumber Int?

  email String @unique
  emailVerified Boolean @default(false)
  
  role Role
  password String

  locationId String? 
  location Location? @relation(fields: [locationId], references: [id])
  
  inputs  AssignedInput[] 
  applications InputApplication[]
  feedbackMessages FeedbackMessages[]

  @@index([name])
  @@map("users")
}

enum OwnerShip {
  Owner
  Lease
  Sharing
}

enum FarmerType {
  Subsistence
  Commercial
}

enum CropType {
  Grain
  Fruit
  Vegetable
}

enum LiveStockType {
  Goat
  Cattle
  Poultry
  Aquatic
}

model Input {
  id String @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  name String

  quantity Float
  unit String

  userId String

  locationId String
  location Location @relation(fields: [locationId], references: [id])

  assignedInputs  AssignedInput[]
  applications InputApplication[]

  @@map("inputs")
}

model AssignedInput {
  id String @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  received Boolean @default(false)
  payback Float?
  quantity Int

  inputId String
  input Input @relation(fields: [inputId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("assignedinputs")
}

model InputApplication {
  id String @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  accepted Boolean @default(false)
  message String
  quantity Float

  inputId String
  input Input @relation(fields: [inputId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("input_applications")
}

model FeedbackMessages {
  id String @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  message String

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("feedbackMessages")
}

enum Role {
  FARMER
  DISTRIBUTOR
  SUPERUSER
}

enum Gender {
  MALE
  FEMALE
}